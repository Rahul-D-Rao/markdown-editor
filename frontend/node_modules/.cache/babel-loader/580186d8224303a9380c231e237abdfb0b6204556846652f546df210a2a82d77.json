{"ast":null,"code":"import React,{useState}from\"react\";import ReactDOM from\"react-dom/client\";import\"./styles.css\";import{marked}from\"marked\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[markdownText,setMarkdownText]=useState(\"\");const[htmlText,setHtmlText]=useState(\"\");const[isDarkMode,setIsDarkMode]=useState(false);const handleMarkdownChange=event=>{const markdownValue=event.target.value;setMarkdownText(markdownValue);setHtmlText(marked(markdownValue));};const handlePreviewClick=()=>{alert(\"This is a preview-only area!\");};const toggleMode=()=>{setIsDarkMode(!isDarkMode);// Add or remove dark mode class to the body for full-page effect\nif(!isDarkMode){document.body.classList.add(\"dark-mode\");}else{document.body.classList.remove(\"dark-mode\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app \".concat(isDarkMode?\"dark-mode\":\"light-mode\"),children:[/*#__PURE__*/_jsx(\"button\",{className:\"mode-toggle\",onClick:toggleMode,children:isDarkMode?\"Switch to Light Mode\":\"Switch to Dark Mode\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Live Markdown & HTML Editor\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"editor-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"editor-section markdown-section\",children:/*#__PURE__*/_jsx(\"textarea\",{className:\"editor\",value:markdownText,onChange:handleMarkdownChange,placeholder:\"Start typing markdown here\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"preview-section\",onClick:handlePreviewClick,children:/*#__PURE__*/_jsx(\"div\",{className:\"output\",dangerouslySetInnerHTML:{__html:htmlText}})})]})]});};const root=ReactDOM.createRoot(document.getElementById(\"root\"));root.render(/*#__PURE__*/_jsx(App,{}));","map":{"version":3,"names":["React","useState","ReactDOM","marked","jsx","_jsx","jsxs","_jsxs","App","markdownText","setMarkdownText","htmlText","setHtmlText","isDarkMode","setIsDarkMode","handleMarkdownChange","event","markdownValue","target","value","handlePreviewClick","alert","toggleMode","document","body","classList","add","remove","className","concat","children","onClick","onChange","placeholder","dangerouslySetInnerHTML","__html","root","createRoot","getElementById","render"],"sources":["C:/Users/rahul/Downloads/markdown-editor/frontend/src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./styles.css\";\r\nimport { marked } from \"marked\";\r\n\r\nconst App = () => {\r\n  const [markdownText, setMarkdownText] = useState(\"\");\r\n  const [htmlText, setHtmlText] = useState(\"\");\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  const handleMarkdownChange = (event) => {\r\n    const markdownValue = event.target.value;\r\n    setMarkdownText(markdownValue);\r\n    setHtmlText(marked(markdownValue));\r\n  };\r\n\r\n  const handlePreviewClick = () => {\r\n    alert(\"This is a preview-only area!\");\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n\r\n    // Add or remove dark mode class to the body for full-page effect\r\n    if (!isDarkMode) {\r\n      document.body.classList.add(\"dark-mode\");\r\n    } else {\r\n      document.body.classList.remove(\"dark-mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\r\n      <button className=\"mode-toggle\" onClick={toggleMode}>\r\n        {isDarkMode ? \"Switch to Light Mode\" : \"Switch to Dark Mode\"}\r\n      </button>\r\n      <h1>Live Markdown & HTML Editor</h1>\r\n      <div className=\"editor-container\">\r\n        {/* Markdown Editor */}\r\n        <div className=\"editor-section markdown-section\">\r\n          <textarea\r\n            className=\"editor\"\r\n            value={markdownText}\r\n            onChange={handleMarkdownChange}\r\n            placeholder=\"Start typing markdown here\"\r\n          />\r\n        </div>\r\n        {/* Preview Section */}\r\n        <div className=\"preview-section\" onClick={handlePreviewClick}>\r\n          <div\r\n            className=\"output\"\r\n            dangerouslySetInnerHTML={{ __html: htmlText }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,cAAc,CACrB,OAASC,MAAM,KAAQ,QAAQ,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhC,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACY,UAAU,CAAEC,aAAa,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CAEnD,KAAM,CAAAc,oBAAoB,CAAIC,KAAK,EAAK,CACtC,KAAM,CAAAC,aAAa,CAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CACxCT,eAAe,CAACO,aAAa,CAAC,CAC9BL,WAAW,CAACT,MAAM,CAACc,aAAa,CAAC,CAAC,CACpC,CAAC,CAED,KAAM,CAAAG,kBAAkB,CAAGA,CAAA,GAAM,CAC/BC,KAAK,CAAC,8BAA8B,CAAC,CACvC,CAAC,CAED,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvBR,aAAa,CAAC,CAACD,UAAU,CAAC,CAE1B;AACA,GAAI,CAACA,UAAU,CAAE,CACfU,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC,CAC1C,CAAC,IAAM,CACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC,CAC7C,CACF,CAAC,CAED,mBACEpB,KAAA,QAAKqB,SAAS,QAAAC,MAAA,CAAShB,UAAU,CAAG,WAAW,CAAG,YAAY,CAAG,CAAAiB,QAAA,eAC/DzB,IAAA,WAAQuB,SAAS,CAAC,aAAa,CAACG,OAAO,CAAET,UAAW,CAAAQ,QAAA,CACjDjB,UAAU,CAAG,sBAAsB,CAAG,qBAAqB,CACtD,CAAC,cACTR,IAAA,OAAAyB,QAAA,CAAI,6BAA2B,CAAI,CAAC,cACpCvB,KAAA,QAAKqB,SAAS,CAAC,kBAAkB,CAAAE,QAAA,eAE/BzB,IAAA,QAAKuB,SAAS,CAAC,iCAAiC,CAAAE,QAAA,cAC9CzB,IAAA,aACEuB,SAAS,CAAC,QAAQ,CAClBT,KAAK,CAAEV,YAAa,CACpBuB,QAAQ,CAAEjB,oBAAqB,CAC/BkB,WAAW,CAAC,4BAA4B,CACzC,CAAC,CACC,CAAC,cAEN5B,IAAA,QAAKuB,SAAS,CAAC,iBAAiB,CAACG,OAAO,CAAEX,kBAAmB,CAAAU,QAAA,cAC3DzB,IAAA,QACEuB,SAAS,CAAC,QAAQ,CAClBM,uBAAuB,CAAE,CAAEC,MAAM,CAAExB,QAAS,CAAE,CAC/C,CAAC,CACC,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAAC,CAED,KAAM,CAAAyB,IAAI,CAAGlC,QAAQ,CAACmC,UAAU,CAACd,QAAQ,CAACe,cAAc,CAAC,MAAM,CAAC,CAAC,CACjEF,IAAI,CAACG,MAAM,cAAClC,IAAA,CAACG,GAAG,GAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}