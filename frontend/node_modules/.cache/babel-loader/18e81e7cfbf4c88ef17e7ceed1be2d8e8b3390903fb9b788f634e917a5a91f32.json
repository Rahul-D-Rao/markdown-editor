{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahul\\\\Downloads\\\\markdown-editor\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./styles.css\";\nimport { marked } from \"marked\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [markdownText, setMarkdownText] = useState(\"\");\n  const [htmlText, setHtmlText] = useState(\"\");\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const handleMarkdownChange = event => {\n    const markdownValue = event.target.value;\n    setMarkdownText(markdownValue);\n    setHtmlText(marked(markdownValue));\n  };\n  const handleHtmlChange = event => {\n    setHtmlText(event.target.value);\n    setMarkdownText(marked(event.target.value));\n  };\n  const toggleMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mode-toggle\",\n      onClick: toggleMode,\n      children: isDarkMode ? \"Switch to Light Mode\" : \"Switch to Dark Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Live Markdown & HTML Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-section markdown-section\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"editor\",\n          value: markdownText,\n          onChange: handleMarkdownChange,\n          placeholder: \"Start typing markdown here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"output\",\n          contentEditable: true,\n          onInput: handleHtmlChange,\n          dangerouslySetInnerHTML: {\n            __html: htmlText\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4F+Gq5ch9AmC4ZZ3Mm04f2MOSnk=\");\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","marked","jsxDEV","_jsxDEV","App","_s","markdownText","setMarkdownText","htmlText","setHtmlText","isDarkMode","setIsDarkMode","handleMarkdownChange","event","markdownValue","target","value","handleHtmlChange","toggleMode","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","contentEditable","onInput","dangerouslySetInnerHTML","__html","_c","root","createRoot","document","getElementById","render","$RefreshReg$"],"sources":["C:/Users/rahul/Downloads/markdown-editor/frontend/src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./styles.css\";\r\nimport { marked } from \"marked\";\r\n\r\nconst App = () => {\r\n  const [markdownText, setMarkdownText] = useState(\"\");\r\n  const [htmlText, setHtmlText] = useState(\"\");\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  const handleMarkdownChange = (event) => {\r\n    const markdownValue = event.target.value;\r\n    setMarkdownText(markdownValue);\r\n    setHtmlText(marked(markdownValue));\r\n  };\r\n\r\n  const handleHtmlChange = (event) => {\r\n    setHtmlText(event.target.value);\r\n    setMarkdownText(marked(event.target.value));\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n\r\n  return (\r\n    <div className={`app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\r\n      <button className=\"mode-toggle\" onClick={toggleMode}>\r\n        {isDarkMode ? \"Switch to Light Mode\" : \"Switch to Dark Mode\"}\r\n      </button>\r\n      <h1>Live Markdown & HTML Editor</h1>\r\n      <div className=\"editor-container\">\r\n        <div className=\"editor-section markdown-section\">\r\n          <textarea\r\n            className=\"editor\"\r\n            value={markdownText}\r\n            onChange={handleMarkdownChange}\r\n            placeholder=\"Start typing markdown here\"\r\n          />\r\n        </div>\r\n        <div className=\"preview-section\">\r\n          <div\r\n            className=\"output\"\r\n            contentEditable={true}\r\n            onInput={handleHtmlChange}\r\n            dangerouslySetInnerHTML={{ __html: htmlText }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}