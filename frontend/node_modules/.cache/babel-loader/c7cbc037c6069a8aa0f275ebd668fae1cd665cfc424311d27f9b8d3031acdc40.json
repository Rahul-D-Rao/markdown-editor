{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahul\\\\Downloads\\\\markdown-editor\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [markdown, setMarkdown] = useState(\"\");\n  const [html, setHtml] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleMarkdownChange = event => {\n    setMarkdown(event.target.value);\n  };\n  const convertMarkdownToHtml = markdownText => {\n    // Simple Markdown to HTML conversion (you can improve this using libraries like markdown-it)\n    let htmlContent = markdownText.replace(/#/g, \"<h1>\").replace(/#/g, \"</h1>\"); // Basic example; for real use, implement better logic\n    return htmlContent;\n  };\n  useEffect(() => {\n    // Whenever markdown updates, convert it to HTML\n    const convertedHtml = convertMarkdownToHtml(markdown);\n    setHtml(convertedHtml);\n  }, [markdown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: markdown,\n        onChange: handleMarkdownChange,\n        placeholder: \"Type your markdown here...\",\n        className: \"editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"splitter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview\",\n      dangerouslySetInnerHTML: {\n        __html: html\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: loading,\n        children: \"Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ihy5Copqu5FQOufTXa3xieO0m1M=\");\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ReactDOM","jsxDEV","_jsxDEV","App","_s","markdown","setMarkdown","html","setHtml","loading","setLoading","error","setError","handleMarkdownChange","event","target","value","convertMarkdownToHtml","markdownText","htmlContent","replace","convertedHtml","className","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","disabled","_c","root","createRoot","document","getElementById","render","$RefreshReg$"],"sources":["C:/Users/rahul/Downloads/markdown-editor/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./styles.css\";\r\n\r\nconst App = () => {\r\n  const [markdown, setMarkdown] = useState(\"\");\r\n  const [html, setHtml] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleMarkdownChange = (event) => {\r\n    setMarkdown(event.target.value);\r\n  };\r\n\r\n  const convertMarkdownToHtml = (markdownText) => {\r\n    // Simple Markdown to HTML conversion (you can improve this using libraries like markdown-it)\r\n    let htmlContent = markdownText.replace(/#/g, \"<h1>\").replace(/#/g, \"</h1>\"); // Basic example; for real use, implement better logic\r\n    return htmlContent;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Whenever markdown updates, convert it to HTML\r\n    const convertedHtml = convertMarkdownToHtml(markdown);\r\n    setHtml(convertedHtml);\r\n  }, [markdown]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"editor\">\r\n        <textarea\r\n          value={markdown}\r\n          onChange={handleMarkdownChange}\r\n          placeholder=\"Type your markdown here...\"\r\n          className=\"editor\"\r\n        />\r\n      </div>\r\n      <div className=\"splitter\" />\r\n      <div className=\"preview\" dangerouslySetInnerHTML={{ __html: html }} />\r\n      <div className=\"button-container\">\r\n        <button disabled={loading}>Convert</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,oBAAoB,GAAIC,KAAK,IAAK;IACtCR,WAAW,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMC,qBAAqB,GAAIC,YAAY,IAAK;IAC9C;IACA,IAAIC,WAAW,GAAGD,YAAY,CAACE,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAC7E,OAAOD,WAAW;EACpB,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd;IACA,MAAMsB,aAAa,GAAGJ,qBAAqB,CAACZ,QAAQ,CAAC;IACrDG,OAAO,CAACa,aAAa,CAAC;EACxB,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrB,OAAA;MAAKoB,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACrBrB,OAAA;QACEc,KAAK,EAAEX,QAAS;QAChBmB,QAAQ,EAAEX,oBAAqB;QAC/BY,WAAW,EAAC,4BAA4B;QACxCH,SAAS,EAAC;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN3B,OAAA;MAAKoB,SAAS,EAAC;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5B3B,OAAA;MAAKoB,SAAS,EAAC,SAAS;MAACQ,uBAAuB,EAAE;QAAEC,MAAM,EAAExB;MAAK;IAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtE3B,OAAA;MAAKoB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/BrB,OAAA;QAAQ8B,QAAQ,EAAEvB,OAAQ;QAAAc,QAAA,EAAC;MAAO;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzB,EAAA,CAvCID,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAyCT,MAAM+B,IAAI,GAAGlC,QAAQ,CAACmC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cAACpC,OAAA,CAACC,GAAG;EAAAuB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,CAAC;AAAC,IAAAI,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}