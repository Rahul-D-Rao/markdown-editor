{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahul\\\\Downloads\\\\markdown-editor\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom/client\"; // Correct import for React 18\nimport \"./styles.css\";\nimport markdown from \"markdown-it\"; // Use markdown-it for real-time markdown parsing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [markdownText, setMarkdownText] = useState(\"\"); // Markdown text state\n  const [htmlText, setHtmlText] = useState(\"\"); // HTML text state\n\n  // Initialize markdown-it parser\n  const mdParser = new markdown();\n\n  // Handle real-time markdown to HTML conversion\n  const handleMarkdownChange = event => {\n    const markdownValue = event.target.value;\n    setMarkdownText(markdownValue);\n    setHtmlText(mdParser.render(markdownValue)); // Convert markdown to HTML\n  };\n\n  // Sync HTML input and update Markdown (optional feature to edit HTML directly)\n  const handleHtmlChange = event => {\n    setHtmlText(event.target.value);\n    // Convert HTML back to markdown using a simple regex (may not be perfect)\n    setMarkdownText(mdParser.render(event.target.value)); // Update markdown live\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Live Markdown & HTML Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-section markdown-section\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"editor\",\n          value: markdownText,\n          onChange: handleMarkdownChange,\n          placeholder: \"Start typing markdown here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"output\",\n          contentEditable: true,\n          onInput: handleHtmlChange,\n          dangerouslySetInnerHTML: {\n            __html: htmlText\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hMG3SDME6HRsZOgkl+jDgk16jN0=\");\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 56,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ReactDOM","markdown","jsxDEV","_jsxDEV","App","_s","markdownText","setMarkdownText","htmlText","setHtmlText","mdParser","handleMarkdownChange","event","markdownValue","target","value","render","handleHtmlChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","contentEditable","onInput","dangerouslySetInnerHTML","__html","_c","root","createRoot","document","getElementById","$RefreshReg$"],"sources":["C:/Users/rahul/Downloads/markdown-editor/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\"; // Correct import for React 18\r\nimport \"./styles.css\";\r\nimport markdown from \"markdown-it\"; // Use markdown-it for real-time markdown parsing\r\n\r\nconst App = () => {\r\n  const [markdownText, setMarkdownText] = useState(\"\"); // Markdown text state\r\n  const [htmlText, setHtmlText] = useState(\"\"); // HTML text state\r\n\r\n  // Initialize markdown-it parser\r\n  const mdParser = new markdown();\r\n\r\n  // Handle real-time markdown to HTML conversion\r\n  const handleMarkdownChange = (event) => {\r\n    const markdownValue = event.target.value;\r\n    setMarkdownText(markdownValue);\r\n    setHtmlText(mdParser.render(markdownValue)); // Convert markdown to HTML\r\n  };\r\n\r\n  // Sync HTML input and update Markdown (optional feature to edit HTML directly)\r\n  const handleHtmlChange = (event) => {\r\n    setHtmlText(event.target.value);\r\n    // Convert HTML back to markdown using a simple regex (may not be perfect)\r\n    setMarkdownText(mdParser.render(event.target.value)); // Update markdown live\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Live Markdown & HTML Editor</h1>\r\n      <div className=\"editor-container\">\r\n        {/* Left Column - Markdown Editor */}\r\n        <div className=\"editor-section markdown-section\">\r\n          <textarea\r\n            className=\"editor\"\r\n            value={markdownText}\r\n            onChange={handleMarkdownChange}\r\n            placeholder=\"Start typing markdown here\"\r\n          />\r\n        </div>\r\n\r\n        {/* Right Column - Live HTML Preview */}\r\n        <div className=\"preview-section\">\r\n          <div\r\n            className=\"output\"\r\n            contentEditable={true}\r\n            onInput={handleHtmlChange}\r\n            dangerouslySetInnerHTML={{ __html: htmlText }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,kBAAkB,CAAC,CAAC;AACzC,OAAO,cAAc;AACrB,OAAOC,QAAQ,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAMY,QAAQ,GAAG,IAAIT,QAAQ,CAAC,CAAC;;EAE/B;EACA,MAAMU,oBAAoB,GAAIC,KAAK,IAAK;IACtC,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACxCR,eAAe,CAACM,aAAa,CAAC;IAC9BJ,WAAW,CAACC,QAAQ,CAACM,MAAM,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC;;EAED;EACA,MAAMI,gBAAgB,GAAIL,KAAK,IAAK;IAClCH,WAAW,CAACG,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IAC/B;IACAR,eAAe,CAACG,QAAQ,CAACM,MAAM,CAACJ,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxD,CAAC;EAED,oBACEZ,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA;MAAAgB,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpCpB,OAAA;MAAKe,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAE/BhB,OAAA;QAAKe,SAAS,EAAC,iCAAiC;QAAAC,QAAA,eAC9ChB,OAAA;UACEe,SAAS,EAAC,QAAQ;UAClBH,KAAK,EAAET,YAAa;UACpBkB,QAAQ,EAAEb,oBAAqB;UAC/Bc,WAAW,EAAC;QAA4B;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNpB,OAAA;QAAKe,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9BhB,OAAA;UACEe,SAAS,EAAC,QAAQ;UAClBQ,eAAe,EAAE,IAAK;UACtBC,OAAO,EAAEV,gBAAiB;UAC1BW,uBAAuB,EAAE;YAAEC,MAAM,EAAErB;UAAS;QAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClB,EAAA,CA/CID,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAiDT,MAAM2B,IAAI,GAAG/B,QAAQ,CAACgC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACf,MAAM,cAACb,OAAA,CAACC,GAAG;EAAAgB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,CAAC;AAAC,IAAAO,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}