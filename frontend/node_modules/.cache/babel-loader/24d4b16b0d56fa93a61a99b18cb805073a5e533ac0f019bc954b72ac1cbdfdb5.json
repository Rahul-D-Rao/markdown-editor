{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahul\\\\Downloads\\\\markdown-editor\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom/client\"; // Correct import for React 18\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [markdown, setMarkdown] = useState(\"\");\n  const [html, setHtml] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [editableHtml, setEditableHtml] = useState(\"\");\n  const handleChange = event => {\n    setMarkdown(event.target.value);\n  };\n  const handleConvert = async () => {\n    setLoading(true);\n    setError(null); // Reset error on new request\n\n    try {\n      const response = await fetch(\"http://localhost:5000/convert\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          content: markdown\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to convert Markdown\");\n      }\n      const result = await response.json();\n      setHtml(result.html); // Set the converted HTML\n      setEditableHtml(result.html); // Set editable HTML area\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setError(\"There was an error with the request. Please try again.\"); // Display the error\n    } finally {\n      setLoading(false); // Reset loading state\n    }\n  };\n  const handleReconvert = async () => {\n    setLoading(true);\n    setError(null); // Reset error on new request\n\n    try {\n      const response = await fetch(\"http://localhost:5000/revert\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          content: editableHtml\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to convert HTML back to Markdown\");\n      }\n      const result = await response.json();\n      setMarkdown(result.markdown); // Set the markdown text after reconversion\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setError(\"There was an error with the request. Please try again.\"); // Display the error\n    } finally {\n      setLoading(false); // Reset loading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Markdown Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: markdown,\n      onChange: handleChange,\n      placeholder: \"Type your markdown here\",\n      className: \"editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConvert,\n      className: \"convert-button\",\n      disabled: loading,\n      children: loading ? \"Converting...\" : \"Convert to HTML\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Converted HTML\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        contentEditable: \"true\",\n        className: \"editable-output\",\n        onInput: e => setEditableHtml(e.target.innerHTML),\n        dangerouslySetInnerHTML: {\n          __html: editableHtml\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReconvert,\n        className: \"reconvert-button\",\n        disabled: loading,\n        children: loading ? \"Reverting...\" : \"Reconvert to Markdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n// React 18: Use `ReactDOM.createRoot().render()` instead of `ReactDOM.render()`\n_s(App, \"V0bERVivOEx+UlbK7ALGz/OqZHU=\");\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 107,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","jsxDEV","_jsxDEV","App","_s","markdown","setMarkdown","html","setHtml","loading","setLoading","error","setError","editableHtml","setEditableHtml","handleChange","event","target","value","handleConvert","response","fetch","method","headers","body","JSON","stringify","content","ok","Error","result","json","console","handleReconvert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","disabled","contentEditable","onInput","e","innerHTML","dangerouslySetInnerHTML","__html","_c","root","createRoot","document","getElementById","render","$RefreshReg$"],"sources":["C:/Users/rahul/Downloads/markdown-editor/frontend/src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom/client\"; // Correct import for React 18\r\nimport \"./styles.css\";\r\n\r\nconst App = () => {\r\n  const [markdown, setMarkdown] = useState(\"\");\r\n  const [html, setHtml] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [editableHtml, setEditableHtml] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setMarkdown(event.target.value);\r\n  };\r\n\r\n  const handleConvert = async () => {\r\n    setLoading(true);\r\n    setError(null); // Reset error on new request\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/convert\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ content: markdown }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to convert Markdown\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      setHtml(result.html); // Set the converted HTML\r\n      setEditableHtml(result.html); // Set editable HTML area\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setError(\"There was an error with the request. Please try again.\"); // Display the error\r\n    } finally {\r\n      setLoading(false); // Reset loading state\r\n    }\r\n  };\r\n\r\n  const handleReconvert = async () => {\r\n    setLoading(true);\r\n    setError(null); // Reset error on new request\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/revert\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ content: editableHtml }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to convert HTML back to Markdown\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      setMarkdown(result.markdown); // Set the markdown text after reconversion\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setError(\"There was an error with the request. Please try again.\"); // Display the error\r\n    } finally {\r\n      setLoading(false); // Reset loading state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Markdown Editor</h1>\r\n      <textarea\r\n        value={markdown}\r\n        onChange={handleChange}\r\n        placeholder=\"Type your markdown here\"\r\n        className=\"editor\"\r\n      />\r\n      <button\r\n        onClick={handleConvert}\r\n        className=\"convert-button\"\r\n        disabled={loading}\r\n      >\r\n        {loading ? \"Converting...\" : \"Convert to HTML\"}\r\n      </button>\r\n      {error && <p className=\"error\">{error}</p>}{\" \"}\r\n      {/* Display error if present */}\r\n      <div className=\"output\">\r\n        <h2>Converted HTML</h2>\r\n        <div\r\n          contentEditable=\"true\"\r\n          className=\"editable-output\"\r\n          onInput={(e) => setEditableHtml(e.target.innerHTML)}\r\n          dangerouslySetInnerHTML={{ __html: editableHtml }}\r\n        />\r\n        <button\r\n          onClick={handleReconvert}\r\n          className=\"reconvert-button\"\r\n          disabled={loading}\r\n        >\r\n          {loading ? \"Reverting...\" : \"Reconvert to Markdown\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// React 18: Use `ReactDOM.createRoot().render()` instead of `ReactDOM.render()`\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}